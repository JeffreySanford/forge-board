@use './styles/variables' as *;
@use './styles/utilities'; // To access %fieldset-label-base
@use 'sass:color';

/* ==========================================================================
   GLOBAL LAYOUT & CONTENT WRAPPER
   ========================================================================== */

.content-container {
  flex: 1 1 auto;
  min-height: 0;
  min-width: 0;
  width: 100%;
  margin: 0;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  background: white;
  position: relative;
  overflow: visible;
}

/* ==========================================================================
   CONTENT CONTAINER
   ========================================================================== */

.content-wrapper {
  flex: 1 1 auto;
  min-height: 0;
  min-width: 0;
  width: 100%;
  margin: 0;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  background: $background-light; // Use variable
  position: relative;
  overflow: visible; // Default, can be overridden by blue-border
}

.content-wrapper.blue-border {
  flex: 1; // Overrides flex: 1 1 auto from .content-wrapper
  height: calc(100% - 2em); // Specific height
  width: calc(100% - 2em);  // Specific width
  margin: 1em;
  padding: 0.25em; // Added from a later definition
  border: 2px solid $primary-color; // Use variable, changed from 1em
  border-radius: 1.5em;
  background: $background-content-wrapper !important; // Use variable, was `none` in a later definition, this one takes precedence
  align-items: stretch; // Added from a later definition
  max-height: 100vh; // Added from a later definition
  overflow: hidden; // Overrides overflow: visible from .content-wrapper
  // min-height: 0; // Inherited from .content-wrapper
  // min-width: 0; // Inherited from .content-wrapper
  // box-sizing: border-box; // Inherited from .content-wrapper
  // display: flex; // Inherited from .content-wrapper
  // flex-direction: column; // Inherited from .content-wrapper
  // position: relative; // Inherited from .content-wrapper
}

/* ==========================================================================
   Header
   ========================================================================== */

.header-containter {
  font-weight: bold;
  font-size: 1.1rem;
  justify-content: center;
  border-bottom: 2px solid white;
  min-height: 2.2rem;
  height: 2.2rem;
  padding: 0 0.5rem;
}

/* ==========================================================================
   DASHBOARD CONTAINER
   ========================================================================== */

.dashboard-container {
  flex: 1;
  display: flex;
  flex-direction: column;
  border: 2px solid $primary-color; // Use variable
  border-radius: 0.5em;
  background: $background-dark; // Use variable
  box-sizing: border-box;
  margin: 1em 0;
  padding: 1em;
  position: relative;
  min-height: 0;
  min-width: 0;
  overflow: hidden;
}

/* ==========================================================================
   TILE GRID CONTAINER
   ========================================================================== */

.tile-grid-container {
  position: relative;
  flex: 1 1 auto;
  max-width: 100%;
  max-height: 100%;
  margin: 1em 1em;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  border: 2px solid $border-color-tile-grid; // Use variable
  border-radius: 0.75em;
  overflow: visible;
  background: none;
}
.tile-grid-container.hide-border {
  border: none !important;
}

.tilegrid-label {
  @extend %fieldset-label-base;
  color: $border-color-tile-grid; // Use variable
  border-color: $border-color-tile-grid; // Use variable
  background: none;
  left: 0.25em;
  bottom: 0.25em;
}

/* ==========================================================================
   TILE GRID
   ========================================================================== */

.tile-grid {
  flex: 1 1 auto;
  display: flex;
  flex-wrap: wrap;
  gap: 0.5em;
  width: 100%;
  height: calc(100% - 2em);
  min-height: 0;
  min-width: 0;
  justify-content: flex-start;
  align-items: flex-start;
  margin: 1em 0;
  padding: 0;
  box-sizing: border-box;
  z-index: 1;
  background: none;
}

.tile-grid > * {
  flex: 1 1 calc(20% - 2em);
  min-width: 6em;
  max-width: calc(20% - 2em);
  min-height: 120px;
  max-height: 200px;
  border: 2px solid $border-color-tile-grid; // Use variable
  border-radius: 0.5em;
  margin: 1em;
  box-sizing: border-box;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  transition: box-shadow 0.2s;
  box-shadow: 0 2px 8px rgba(52,152,219,0.10);
}

/* Responsive breakpoints for tile grid */
@media (max-width: 1700px) {
  .tile-grid > * {
    flex: 1 1 calc(25% - 2em);
    max-width: calc(25% - 2em);
  }
}
@media (max-width: 1400px) {
  .tile-grid > * {
    flex: 1 1 calc(33.333% - 2em);
    max-width: calc(33.333% - 2em);
  }
}
@media (max-width: 1100px) {
  .tile-grid > * {
    flex: 1 1 calc(50% - 2em);
    max-width: calc(50% - 2em);
  }
}
@media (max-width: 700px) {
  .tile-grid > * {
    flex: 1 1 100%;
    max-width: 100%;
    margin: 1em 0;
  }
  .tile-grid {
    gap: 1em;
  }
}

/* Drag handle style for tiles */
.tile-drag-handle {
  cursor: grab;
  padding: 0.25em 0.5em;
  background: $border-color-tile-grid; // Use variable
  color: $text-color-light;
  font-size: 0.9em;
  border-bottom: 1px solid #fff;
  border-radius: 0.5em 0.5em 0 0;
  user-select: none;
  display: flex;
  align-items: center;
  gap: 0.5em;
}

/* Drag-over effect */
.tile-grid > *.cdk-drag-preview,
.tile-grid > *.cdk-drag-placeholder {
  opacity: 0.7;
  border: 2px dashed #3498db;
  background: #eaf6fb;
}

/* Enhanced drag-drop styles */
.tile-drag {
  cursor: move;
  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
}

.tile-drag.cdk-drag-preview {
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
  border: 2px solid $accent-color !important; // Use variable
  opacity: 0.8;
}

.tile-drag.cdk-drag-placeholder {
  opacity: 0;
}

.tile-drag.cdk-drag-animating {
  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
}

.tile-grid.cdk-drop-list-dragging .tile-drag:not(.cdk-drag-placeholder) {
  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
}

.tile-placeholder {
  background: $background-dark; // Use variable
  border: 2px dashed $accent-color; // Use variable
  color: $accent-color; // Use variable
}

.placeholder-content {
  font-family: 'IBM Plex Mono', 'Courier New', monospace;
  text-transform: uppercase;
  font-size: 1.2em;
  letter-spacing: 0.1em;
}

/* Visibility toggle button */
.tile-visibility-toggle {
  margin-left: auto;
  background: none;
  border: none;
  color: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0;
  width: 24px;
  height: 24px;
}

.tile-visibility-toggle mat-icon {
  font-size: 18px;
}

.tile-visibility-toggle:hover {
  color: $accent-color; // Use variable
}

/* ==========================================================================
   ICON CONTROLS (AUDIO & LAYOUT)
   ========================================================================== */

.controls-row {
  position: relative;
  display: flex;
  flex-direction: row-reverse;
  gap: 1em;
  align-items: center;
  justify-content: flex-end;
  z-index: 100;
  margin: 0.5em 1em; /* Consolidated margin, was 1em 1em 1em auto initially */
  padding: 0.5em; // Added from an earlier definition of .controls-row
}

.audio-icon,
.layout-icon {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  background: none;
  border: none;
  box-shadow: none;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition:
    transform 0.3s ease-out,
    box-shadow 0.3s,
    border-color 0.3s,
    background 0.3s;
  z-index: 100;
  padding: 0;
}

.audio-icon mat-icon {
  font-size: 28px;
  color: $success-color; // Use variable (example: vibrant green)
  margin: 0;
  line-height: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: color 0.2s;
}
.layout-icon {
  font-size: 28px;
  color: $primary-color; // Use variable (example: vibrant blue)
  margin: 0;
  line-height: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: color 0.2s;
  position: relative; // Keep relative for indicator
}

.layout-icon .layout-indicator {
  position: absolute;
  top: 2px;
  right: 2px;
  background: $border-color-dark; // Use variable
  color: $warning-color; // Use variable (example: #ffe066)
  font-size: 0.7em;
  font-weight: bold;
  border-radius: 50%;
  width: 1.3em;
  height: 1.3em;
  display: flex;
  align-items: center;
  justify-content: center;
  pointer-events: none;
  border: 1.5px solid $warning-color; // Use variable
  box-shadow: 0 0 4px $warning-color; // Use variable
  z-index: 2;
}

.audio-icon.shake,
.layout-icon.shake {
  animation: shakeIcon 0.8s cubic-bezier(.36,.07,.19,.97) both;
  transform-origin: center center;
}

.audio-icon:hover,
.layout-icon:hover {
  background: rgba(0, 0, 0, 0.06);
  border: 2px solid $accent-color; // Use variable
  box-shadow: 0 0 20px $accent-color, 0 0 10px $accent-color; // Use variable
  transform: scale(1.1);
}
.audio-icon:hover mat-icon,
.layout-icon:hover mat-icon {
  color: $accent-color; // Use variable
}

.layout-icon.active,
.layout-icon:hover {
  background: rgba(0, 0, 0, 0.06);
  border: 2px solid $accent-color; // Use variable
  box-shadow: 0 0 20px $accent-color, 0 0 10px $accent-color; // Use variable
  transform: scale(1.1);
}
.layout-icon.active mat-icon,
.layout-icon:hover mat-icon {
  color: $accent-color; // Use variable
}

/* ==========================================================================
   ANIMATIONS
   ========================================================================== */

@keyframes shakeIcon {
  0%, 100% { transform: translate(0, 0); }
  10%, 30%, 50%, 70%, 90% { transform: translate(-3px, 0); }
  20%, 40%, 60%, 80% { transform: translate(3px, 0); }
}

/* ==========================================================================
   OUTER PAGE CONTAINER (BLACK BORDER, NO BACKGROUND)
   ========================================================================== */
.page-container {
  min-height: 0;
  min-width: 0;
  height: 100vh;
  width: 100vw;
  margin: 0;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  border: 4px solid $color-black; // Use variable
  border-radius: 0.5em;
  position: relative;
  overflow: auto;
  padding: 0;
  /* background removed */
}

.page-container > legend {
  position: absolute;
  top: -1.2em;
  left: 2em;
  font-size: 1.2em;
  color: $primary-color; // Use variable
  background: $background-dark; // Use variable
  padding: 0 1em;
  border-radius: 1em;
  font-weight: bold;
  z-index: 10;
  letter-spacing: 0.1em;
}

fieldset.page-container {
  border: 4px solid $primary-color; // Use variable
  border-radius: 1.5em;
  margin: 0;
  padding: 0;
  position: relative;
}

/* ==========================================================================
   CONTENT CONTAINER BLUE BORDER, NO BACKGROUND
   ========================================================================== */
/* .content-wrapper.blue-border { // Fully consolidated above
  flex: 1;
  min-height: 0;
  min-width: 0;
  height: calc(100% - 2em);
  width: calc(100% - 2em);
  margin: 1em;
  padding: 0.25em;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  border: 2px solid $primary-color; // Use variable
  border-radius: 1.5em;
  position: relative;
  overflow: visible;
  background: none;
  display: flex;
  flex-direction: column;
  align-items: stretch;
  max-height: 100vh;
  overflow: hidden;
} */

/* ==========================================================================
   LAYOUT CONTAINER (NO BACKGROUND)
   ========================================================================== */
.layout-container {
  flex: 1 1 auto;
  display: flex;
  flex-direction: column;
  border: 3px solid $border-color-dark; // Use variable
  border-radius: 1em;
  margin: 2em 1em 1em 1em; /* Added bottom margin */
  position: relative;
  min-height: 400px;
  min-width: 0;
  overflow: hidden;
  box-sizing: border-box;
  background: $background-layout-container !important; // Use variable
  /* Take all available vertical space except footer/callout */
}

/* Center lines (background) */
.layout-center-x,
.layout-center-y {
  position: absolute;
  pointer-events: none;
  z-index: 0;
}

.layout-center-x {
  left: 0;
  right: 0;
  top: 50%;
  height: 0;
  border-top: 2px dashed #888;
  opacity: 0.18;
}

.layout-center-y {
  top: 0;
  bottom: 0;
  left: 50%;
  width: 0;
  border-left: 2px dashed #888;
  opacity: 0.18;
}

/* Layout border with center lines, now only styled inside layout-container */
.layout-container .layout-border {
  position: absolute;
  pointer-events: none;
  z-index: 1;
  top: 0; left: 0; right: 0; bottom: 0;
  width: 100%;
  height: 100%;
  border: none;
}

.layout-container .center-line-h {
  position: absolute;
  left: 0; right: 0;
  top: 50%;
  height: 0;
  border-top: 1.5px dashed #888;
  opacity: 0.18;
}

.layout-container .center-line-v {
  position: absolute;
  top: 0; bottom: 0;
  left: 50%;
  width: 0;
  border-left: 1.5px dashed #888;
  opacity: 0.18;
}

/* ==========================================================================
   UTILITY
   ========================================================================== */

html, body {
  height: 100%;
  width: 100%;
  margin: 0;
  padding: 0;
  overflow: auto;
}


/* Hide mute-toggle and context-toggle by default, only show when toggled in HTML */
.mute-toggle,
.context-toggle {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background-color: rgba(0, 0, 0, 0.4);
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  border: 2px solid #fff;
  margin-left: 1em;
  transition: transform 0.2s, background 0.2s, border-color 0.2s;
}

.mute-toggle mat-icon {
  font-size: 18px;
  color: $accent-color; // Use variable
}

.context-toggle {
  background: $primary-color; // Use variable
}
.context-toggle mat-icon {
  color: $text-color-light;
}
.context-toggle.active {
  background: color.adjust($primary-color, $lightness: -10%); // Use variable and SASS function
  border: 2px solid $accent-color; // Use variable
}

/* ==========================================================================
   FIELDSET LABELS FOR CONTAINERS
   ========================================================================== */
.fieldset-label {
  @extend %fieldset-label-base; // Use placeholder
  // Specific color overrides if needed, otherwise, it inherits from %fieldset-label-base
  // For example, if .content-label needs a different color:
  // &.content-label { color: $some-other-color; border-color: $some-other-color; }
}

.content-label {
  @extend %fieldset-label-base;
  color: $primary-color;
  border-color: $primary-color;
}

.layout-label {
  @extend %fieldset-label-base;
  color: $border-color-dark;
  border-color: $border-color-dark;
}

/* ==========================================================================
   FOOTER CONTAINER (CALLOUT + CONTROLS)
   ========================================================================== */

/* Callout container: consolidated below */
// .callout-container {
//   position: relative;
//   margin: 1em;
//   width: 100%;
//   display: flex;
//   flex-direction: column;
//   align-items: stretch;
//   justify-content: flex-start;
//   max-height: 7em;
//   width: calc(100% - 2em);
//   margin: 0.5em 1em;
// }

/* Callout drawing: styles incorporated into consolidated .callout-container */
// .callout-drawing {
//   flex: 1 1 auto;
//   min-width: 320px;
//   max-width: none;
//   min-height: 3em;
//   max-height: 5em;
//   width: 100%;
//   background: $color-white !important; // Use variable
//   color: $primary-color !important; // Use variable
//   border: 2px solid $border-color-error !important; // Use variable
//   border-radius: 0.75em;
//   box-shadow: 0 2px 12px rgba($primary-color,0.08); // Use variable
//   display: flex;
//   align-items: flex-start;
//   justify-content: flex-start;
//   position: relative;
//   margin: 0;
//   padding: 0.5em 1.5em 0.5em 1.5em;
//   overflow: hidden;
// }

/* ==========================================================================
   CONTENT CONTAINER FLEX COLUMN STACKING
   ========================================================================== */
/* .content-wrapper.blue-border { // Consolidated above
  display: flex;
  flex-direction: column;
  align-items: stretch;
} */

/* ==========================================================================
   CALLOUT CONTAINER (STACKED BELOW LAYOUT CONTAINER)
   ========================================================================== */
/* .callout-container { // Consolidated below
  position: relative;
  margin: 1em;
  width: calc(100% - 2em);
  display: flex;
  flex-direction: column;
  align-items: stretch;
  justify-content: flex-start;
} */

.callout-label {
  @extend %fieldset-label-base;
  color: $border-color-error !important;
  border-color: $border-color-error !important;
}

/* Callout drawing: match layout-container width, same margin, same max/min height */
/* .callout-drawing { // Incorporated into consolidated .callout-container
  flex: 1 1 auto;
  min-width: 320px;
  max-width: none;
  min-height: 3em;
  max-height: 5em;
  width: 100%;
  background: $color-white !important;
  color: $primary-color !important;
  border: 2px solid $border-color-error !important;
  border-radius: 0.75em;
  box-shadow: 0 2px 12px rgba($primary-color,0.08);
  display: flex;
  align-items: flex-start;
  justify-content: flex-start;
  position: relative;
  margin: 0;
  padding: 0.5em 1.5em 0.5em 1.5em;
  overflow: hidden;
} */

/* ==========================================================================
   CALLOUT CONTAINER (COMBINED WITH DRAWING) & ALIGNED
   ========================================================================== */
.callout-container {
  flex: 0 0 auto; /* Was 1 1 auto, changed to prevent growing */
  min-width: 0; // Was 320px
  // max-width: none; // Default
  min-height: 3em;
  max-height: 120px; /* Consolidated from 7em and 80px, choosing a fixed pixel value */
  width: auto; /* Changed from 100% and calc(100% - 2em) */
  margin: 0.5em 1em 0.5em 1em; /* Consolidated, was 1em, 0.5em 1em, 1em 1em 2em 1em */
  background: $color-white !important;
  color: $primary-color !important;
  border: 2px solid $border-color-error !important;
  border-radius: 0.75em;
  box-shadow: 0 2px 12px rgba($primary-color,0.08);
  display: flex;
  // align-items: flex-start; // Kept from original
  // justify-content: flex-start; // Kept from original
  flex-direction: column; // Added to ensure content stacks if it overflows
  position: relative;
  padding: 0.5em 1.5em; // Simplified padding
  overflow-y: auto; // Changed from hidden to auto
  box-sizing: border-box; // Added for consistency

  &.animating {
    border-color: $warning-color !important;
    box-shadow: 0 0 0 2px $warning-color, 0 2px 12px rgba($primary-color,0.08);
  }
}

/* ==========================================================================
   CALLOUT CONTAINER (ALIGNED, NO OVERHANG)
   ========================================================================== */
/* .callout-container { // Consolidated above
  margin: 1em 1em 2em 1em; 
  width: auto;
  max-width: unset;
  min-width: 0;
  box-sizing: border-box;
} */

.callout-meta {
  font-size: 0.85em;
  line-height: 1.2;
  font-family: 'Roboto Mono', 'Courier New', monospace;
  padding: 0.2em 0;
}

.meta-line {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: flex-end;
  gap: 1.5em;
  margin-bottom: 0.15em;
  font-size: 0.95em;
}

.key, .val {
  display: inline-block;
  text-align: right;
  font-family: inherit;
  font-size: inherit;
  min-width: 6em;
  padding: 0 0.2em;
}

.key {
  color: $border-color-dark; // Use variable
  font-weight: bold;
  opacity: 0.85;
}

.val {
  color: $primary-color; // Use variable
  font-weight: normal;
  opacity: 0.95;
  min-width: 10em;
}

/* ==========================================================================
   LAYOUT OVERLAYS
   ========================================================================== */

.layout-overlays {
  position: absolute;
  top: 0; left: 0; width: 100vw; height: 100vh;
  pointer-events: none;
  z-index: 10;
}

.layout-border-overlay {
  position: absolute;
  top: 0; left: 0; width: 100vw; height: 100vh;
  border: 3px dashed $primary-color; // Use variable
  box-sizing: border-box;
  opacity: 0.3;
  pointer-events: none;
}

.layout-12col-overlay {
  position: absolute;
  top: 0; left: 0; width: 100vw; height: 100vh;
  display: flex;
  z-index: 11;
  pointer-events: none;
  opacity: 0.4;
  // 12 columns with fancy lines
  background: repeating-linear-gradient(
    to right,
    transparent,
    transparent calc(100vw / 12 - 2px),
    $warning-color calc(100vw / 12 - 2px), // Use variable
    $warning-color calc(100vw / 12)
  );
  border-left: 2px solid $warning-color; // Use variable
  border-right: 2px solid $warning-color; // Use variable
}

.layout-4col-overlay {
  position: absolute;
  top: 0; left: 0; width: 100vw; height: 100vh;
  display: flex;
  z-index: 12;
  pointer-events: none;
  opacity: 0.4;
  // 4 columns with fancy lines
  background: repeating-linear-gradient(
    to right,
    transparent,
    transparent calc(100vw / 4 - 2px),
    $error-color calc(100vw / 4 - 2px), // Use variable
    $error-color calc(100vw / 4)
  );
  border-left: 2px solid $error-color; // Use variable
  border-right: 2px solid $error-color; // Use variable
}

.layout-grid-overlay {
  position: absolute;
  top: 0; left: 0; width: 100vw; height: 100vh;
  pointer-events: none;
  z-index: 13;
  opacity: 0.25;
  background-size: 32px 32px;
  background-position: 0 0, 0 0;
  background-repeat: repeat;
  &.small {
    background-image:
      linear-gradient(to right, $accent-color 1px, transparent 1px), // Use variable
      linear-gradient(to bottom, $accent-color 1px, transparent 1px); // Use variable
    background-size: 32px 32px;
  }
  &.large {
    background-image:
      linear-gradient(to right, $primary-color 2px, transparent 2px), // Use variable
      linear-gradient(to bottom, $primary-color 2px, transparent 2px); // Use variable
    background-size: 96px 96px;
    opacity: 0.18;
  }
}

.mr-1 {
  margin-right: 1em;
}

/* ==========================================================================
   GLOBAL CONTROLS FOR OVERLAYS
   ========================================================================== */
.global-controls {
  position: fixed;
  right: 1em;
  bottom: 1em;
  display: flex;
  flex-direction: row-reverse;
  gap: 1em;
  align-items: center;
  justify-content: flex-end;
  z-index: 100;
}

.layout-icon { // This is for the global controls, distinct from the .controls-row .layout-icon
  width: 50px;
  height: 50px;
  border-radius: 50%;
  background: rgba($secondary-color, 0.7); // Use variable
  border: 1px solid rgba($accent-color, 0.5); // Use variable
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.3s ease;
  z-index: 100;
  padding: 0;
  
  mat-icon {
    font-size: 24px;
    color: $primary-color; // Use variable
    transition: color 0.2s;
  }
  
  &:hover {
    background: rgba($secondary-color, 0.9); // Use variable
    border: 2px solid $accent-color; // Use variable
    box-shadow: 0 0 15px rgba($accent-color, 0.5); // Use variable
    transform: scale(1.1);
    
    mat-icon {
      color: $accent-color; // Use variable
    }
  }
  
  &.active {
    background: rgba($secondary-color, 0.9); // Use variable
    border: 2px solid $accent-color; // Use variable
    box-shadow: 0 0 15px rgba($accent-color, 0.5); // Use variable
    
    mat-icon {
      color: $accent-color; // Use variable
    }
  }
}

/* New button for container indicator toggle */
.indicator-toggle {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  background: rgba($secondary-color, 0.7); // Use variable
  border: 1px solid rgba($accent-color, 0.5); // Use variable
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.3s ease;
  z-index: 100;
  padding: 0;
  
  mat-icon {
    font-size: 24px;
    color: $primary-color; // Use variable
    transition: color 0.2s;
  }
  
  &:hover {
    background: rgba($secondary-color, 0.9); // Use variable
    border: 2px solid $accent-color; // Use variable
    box-shadow: 0 0 15px rgba($accent-color, 0.5); // Use variable
    transform: scale(1.1);
    
    mat-icon {
      color: $accent-color; // Use variable
    }
  }
  
  &.active {
    background: rgba($secondary-color, 0.9); // Use variable
    border: 2px solid $accent-color; // Use variable
    box-shadow: 0 0 15px rgba($accent-color, 0.5); // Use variable
    
    mat-icon {
      color: $accent-color; // Use variable
    }
  }
}

/* ==========================================================================
   CONTROLS WRAPPER (NEW)
   ========================================================================== */

.controls-wrapper {
  position: relative;
  display: flex;
  flex-direction: column;
  width: 100%;
  min-height: 80px;
  margin-top: auto; /* Push to the bottom of content-wrapper */
  border: 2px solid $primary-color; // Use variable
  border-radius: 0.75em;
  padding: 0.5em;
  box-sizing: border-box;
  background: rgba($secondary-color, 0.4); // Use variable
}

.controls-label {
  @extend %fieldset-label-base;
  color: $primary-color;
  border-color: $primary-color;
}

/* Adjust content wrapper to make room for controls wrapper */
/* .content-wrapper.blue-border { // Consolidated above
  display: flex;
  flex-direction: column;
  min-height: 0;
  max-height: 100vh;
  overflow: hidden;
} */

/* Callout container: align with layout-container, inside controls wrapper */
/* .callout-container { // Consolidated above
  width: calc(100% - 2em);
  margin: 0.5em 1em;
  max-height: 7em;
} */

/* Update controls row positioning */
/* .controls-row { // Consolidated earlier
  position: relative;
  display: flex;
  flex-direction: row-reverse;
  gap: 1em;
  align-items: center;
  justify-content: flex-end;
  z-index: 100;
  margin: 0.5em 1em;
} */

/* ==========================================================================
   AUDIO SYSTEM NOTE
   ========================================================================== */
/* 
   TODO: Audio ambient system requires:
   1. assets/sounds/typewriter/ambient.mp3
   2. assets/sounds/typewriter/ambient-stars-and-stripes-forever-vocals.mp3
   
   Create fallback silencers for these in the preloadAudioElements method
   to prevent console errors when files are missing.
*/

/* ==========================================================================
   CALLOUT CONTAINER FIXES
   ========================================================================== */

app-footer {
  display: block; // Basic styling, can be kept or removed if handled by component
  width: 100%;   // Basic styling
  margin: 1em 0; // Basic styling
  flex: 0 0 auto; /* Don't let it grow, consolidated from later definition */
}

/* Ensure content wrapper leaves space for footer and controls */
/* .content-wrapper.blue-border { // Consolidated earlier
  display: flex;
  flex-direction: column;
  height: calc(100vh - 4em); 
  min-height: 0;
} */

/* Make router-outlet container take remaining height */
router-outlet + * { // This selects the component immediately after router-outlet
  flex: 1 1 auto;
  overflow-y: auto;
  min-height: 0; /* Important for proper flex behavior */
}

/* Controls row positioning fix */
/* .controls-row { // Consolidated earlier
  position: relative;
  display: flex;
  flex-direction: row-reverse;
  gap: 1em;
  align-items: center;
  justify-content: flex-end;
  z-index: 100;
  margin: 0.5em 1em;
} */

/* ==========================================================================
   CONTENT CONTAINER FIXES
   ========================================================================== */

/* .content-wrapper { // Base .content-wrapper already defined, this one is too generic and might conflict
  display: flex;
  flex-direction: column;
  height: 100vh;
  overflow: hidden;
} */

/* Make the router-outlet content area take appropriate space */
/* router-outlet + * { // Consolidated above
  flex: 1 1 auto;
  overflow-y: auto;
  min-height: 0; 
} */

/* Limit the callout container height */
/* .callout-container { // Consolidated above
  max-height: 120px; 
  overflow-y: auto;
  flex: 0 0 auto; 
  margin-bottom: 1em;
} */

/* Ensure content areas have proper sizing */
.home-container, 
.page-container { // .page-container already defined, .home-container is new here
  height: auto;
  min-height: calc(100vh - 180px); /* Account for header, footer and callout */
  display: flex;
  flex-direction: column;
}

/* For better mobile responsiveness */
@media (max-height: 768px) {
  .callout-container {
    max-height: 80px;
  }
}

/* ==========================================================================
   PAGE CONTAINER WITH GOLD BORDER
   ========================================================================== */

.gold-page-container {
  position: relative;
  width: 100vw;
  height: 100vh;
  padding: 0;
  margin: 0;
  box-sizing: border-box;
  border: 2px solid $warning-color; // Gold color (using warning as an example for gold)
  box-shadow: 0 0 8px $warning-color, 0 0 15px rgba($warning-color, 0.5); // Glowing effect
  overflow: hidden;
  display: flex;
  flex-direction: column;
  z-index: 0;
}

.page-indicator {
  position: absolute;
  bottom: 0.5em;
  left: 0.5em;
  color: $warning-color; // Gold color
  font-family: 'IBM Plex Mono', monospace;
  font-size: 0.7em;
  opacity: 0.8;
  z-index: 2;
  pointer-events: none;
}

/* Fix height issues with containers */
/* .content-wrapper { // Consolidated earlier
  flex: 1 1 auto;
  min-height: 0; 
  display: flex;
  flex-direction: column;
} */

/* Make router-outlet content area take appropriate space */
/* router-outlet + * { // Consolidated above
  flex: 1 1 auto;
  overflow-y: auto;
  min-height: 0;
} */

/* Limit the callout container height */
/* .callout-container { // Consolidated above
  max-height: 80px; 
  overflow-y: auto;
  flex: 0 0 auto; 
  margin-bottom: 0.5em;
} */

/* app-footer { // Consolidated earlier
  flex: 0 0 auto; 
} */

/* Ensure controls stay at the bottom */
.controls-row { // Additional properties for specific context, merged with main .controls-row if general enough
  // flex: 0 0 auto; // Already in main .controls-row if desired
  margin-top: auto; /* Push to bottom if space available - this is context specific, might be better in controls-wrapper */
}

/* ==========================================================================
   ANIMATED CONSOLE TOOLTIPS
   ========================================================================== */

.console-tooltip {
  position: absolute;
  background: rgba(0, 20, 0, 0.85);
  border: 1px solid $accent-color; // Use variable
  border-radius: 4px;
  padding: 8px 12px;
  max-width: 250px;
  min-width: 150px;
  color: $accent-color; // Use variable
  font-family: 'IBM Plex Mono', 'Courier New', monospace;
  font-size: 0.8em;
  pointer-events: none;
  box-shadow: 0 0 10px rgba($accent-color, 0.5); // Use variable
  z-index: 1000;
  opacity: 0;
  transform: translateY(10px);
  transition: opacity 0.3s, transform 0.3s;
  white-space: pre-line;
  bottom: 100%;
  left: 50%;
  margin-bottom: 10px;
  transform: translateX(-50%);
  text-align: left;
  letter-spacing: 0.05em;
}

.control-wrapper {
  position: relative;
}

.control-wrapper:hover .console-tooltip {
  opacity: 1;
  transform: translateX(-50%) translateY(0);
}

.typing-animation {
  overflow: hidden;
  display: inline-block;
  white-space: nowrap;
  border-right: 0.15em solid $accent-color; // Use variable
  width: 0;
  animation: typing 1.5s steps(40, end) forwards, blink-caret 0.75s step-end infinite;
}

@keyframes typing {
  from { width: 0 }
  to { width: 100% }
}

@keyframes blink-caret {
  from, to { border-color: transparent }
  50% { border-color: $accent-color } // Use variable
}

/* ==========================================================================
   GLOBAL REFRESH CONTROL
   ========================================================================== */

.global-refresh-control {
  display: flex;
  align-items: center;
  margin-left: auto;
  margin-right: 24px;
  padding: 4px 12px;
  background-color: rgba($color-black, 0.1);
  border-radius: 16px;
  
  .refresh-label {
    font-size: 14px;
    font-weight: 500;
    margin-right: 12px;
    white-space: nowrap;
  }
  
  .refresh-slider {
    width: 120px;
    height: 4px;
    -webkit-appearance: none;
    appearance: none;
    background: rgba($color-black, 0.2);
    border-radius: 2px;
    
    &::-webkit-slider-thumb {
      -webkit-appearance: none;
      width: 14px;
      height: 14px;
      background: $primary-color; // Use variable
      border-radius: 50%;
      cursor: pointer;
    }
    
    &::-moz-range-thumb {
      width: 14px;
      height: 14px;
      background: $primary-color; // Use variable
      border-radius: 50%;
      border: none;
      cursor: pointer;
    }
  }
}
