import { Component, OnInit, Output, EventEmitter } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';

import { UserTile } from '../models/user-tile.model';

interface VulnerabilityTile {
  id: string;
  state: 'available' | 'assigned' | 'spent';
}

interface Vulnerability {
  id: string;
  name: string;
  severity: string;
  description: string;
  tiles: VulnerabilityTile[];
}

@Component({
  selector: 'app-vulnerability-management',
  standalone: false,
  templateUrl: './vulnerability-management.component.html',
  styleUrls: ['./vulnerability-management.component.scss'],
})
export class VulnerabilityManagementComponent implements OnInit {
  @Output() tilesUpdated = new EventEmitter<UserTile[]>();

  tiles: UserTile[] = [];
  category = 'vulnerability';

  vulnerabilities: Vulnerability[] = [
    {
      id: 'VULN-001',
      name: 'SQL Injection',
      severity: 'High',
      description: 'Unsanitized input in SQL query.',
      tiles: [
        { id: 'tile-1', state: 'available' },
        { id: 'tile-2', state: 'available' },
        { id: 'tile-3', state: 'available' },
      ],
    },
    {
      id: 'VULN-002',
      name: 'XSS',
      severity: 'Medium',
      description: 'User input rendered without escaping.',
      tiles: [
        { id: 'tile-1', state: 'available' },
        { id: 'tile-2', state: 'available' },
      ],
    },
    // ...add more vulnerabilities as needed
  ];

  sampleVulns = [
    {
      id: 'VULN-1',
      name: 'Outdated Library',
      status: 'active',
      lastChecked: new Date(),
    },
    {
      id: 'VULN-2',
      name: 'SQL Injection',
      status: 'inactive',
      lastChecked: new Date('2023-01-15'),
    },
    {
      id: 'VULN-3',
      name: 'Cross-Site Scripting',
      status: 'pending',
      lastChecked: new Date('2023-05-10'),
    },
  ];

  constructor(private router: Router, private route: ActivatedRoute) {}

  ngOnInit(): void {
    console.log(
      '[Logger] Navigated to Vulnerability Management tab:',
      this.router.url
    );

    // Initialize with some example data
    this.tiles = [
      {
        id: 'vuln-1',
        title: 'Critical Vulnerabilities',
        description: 'Systems with critical vulnerabilities',
        color: '#F44336',
        position: 0,
        category: this.category,
        lastUpdated: new Date(),
        status: 'critical',
      },
      {
        id: 'vuln-2',
        title: 'Patch Status',
        description: 'Systems needing security patches',
        color: '#FFC107',
        position: 1,
        category: this.category,
        lastUpdated: new Date(),
        status: 'warning',
      },
      {
        id: 'vuln-3',
        title: 'Scan Status',
        description: 'Vulnerability scan status',
        color: '#4CAF50',
        position: 2,
        category: this.category,
        lastUpdated: new Date(),
        status: 'active',
      },
      {
        id: 'vuln-4',
        title: 'Remediation Progress',
        description: 'Vulnerability remediation progress',
        color: '#3F51B5',
        position: 3,
        category: this.category,
        lastUpdated: new Date(),
        status: 'active',
      },
    ];

    this.emitUpdatedTiles();
  }

  isDetailView(): boolean {
    return !!(
      this.route.snapshot.firstChild &&
      this.route.snapshot.firstChild.routeConfig &&
      this.route.snapshot.firstChild.routeConfig.path &&
      this.route.snapshot.firstChild.routeConfig.path.startsWith('detail')
    );
  }

  goBack() {
    this.router.navigate(['../'], { relativeTo: this.route });
  }

  drop(event: CdkDragDrop<UserTile[]>): void {
    moveItemInArray(this.tiles, event.previousIndex, event.currentIndex);

    // Update positions after drag and drop
    this.tiles.forEach((tile, index) => {
      tile.position = index;
      tile.lastUpdated = new Date();
    });

    this.emitUpdatedTiles();
  }

  private emitUpdatedTiles(): void {
    this.tilesUpdated.emit([...this.tiles]);
  }

  setTileState(
    vuln: Vulnerability,
    tile: VulnerabilityTile,
    newState: VulnerabilityTile['state']
  ) {
    tile.state = newState;
  }

  getTileClass(tile: VulnerabilityTile): string {
    return `tile-${tile.state}`;
  }
}
