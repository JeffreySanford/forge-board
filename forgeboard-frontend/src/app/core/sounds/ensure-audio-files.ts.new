/**
 * Audio file validation and fallback system for ForgeBoard
 * Browser-compatible version of the sound system utility
 */

import { REQUIRED_SOUNDS, SoundFileUtils, AudioValidationResult as SystemAudioValidationResult } from './sound-system';

// Minimal valid MP3 with silence as fallback sound (base64 encoded)
const SILENT_MP3_BASE64 = 'data:audio/mpeg;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjI5LjEwMAAAAAAAAAAAAAAA//tQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAACAAADkADMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzM//////////////////////////////////////////////////////////////////8AAAAATGF2YzU4LjU0AAAAAAAAAAAAAAAAJAAAAAAAAAADkKYYwGMAAAAAAAAAAAAAAAAA//tUxAAACwwFsQAAAAAAANgLYgAAATZNAR4CDCASBBGQR+k2c//4CPov/rICDECOXb/1PYh6kM3JyvP/+9tf1/+YAYcHwtd/////E38P//3//94GoEEQBGg7ASGAQnAyeMoA//tUxAUACzgJogAAAAAAAQRQgAAAAQDAYFg0OFhJGiwkiyKJs0XZFpMgkpAIBAIBAMZhyfJGjRo2aezpdXO6XS6SvS6vV3o1Ot1dqtXo9G//////jw3RoiDC6VavV6vV7d2aAcBAQCAQ';

/**
 * Results of audio file validation
 */
export type AudioValidationResult = SystemAudioValidationResult;

/**
 * Check if an audio file exists by trying to load it
 */
export async function checkAudioFileExists(url: string): Promise<boolean> {
  return SoundFileUtils.fileExists(url);
}

/**
 * Create an audio element for a sound file
 */
export function createAudioElement(category: string, filename: string): HTMLAudioElement {
  const path = `assets/sounds/${category}/${filename}`;
  
  const audio = new Audio();
  audio.preload = 'auto';
  
  // Add error handler to apply fallback if needed
  audio.addEventListener('error', () => {
    applyFallbackSound(audio);
  });
  
  // Set source path
  audio.src = path;
  audio.load();
  
  return audio;
}

/**
 * Apply fallback sound when primary sound fails to load
 */
export function applyFallbackSound(audio: HTMLAudioElement): void {
  // Use the base64 silent MP3 as fallback
  audio.src = SILENT_MP3_BASE64;
  audio.load();
}

/**
 * Test if the browser can play audio
 */
export async function testAudioPlayback(element = new Audio()): Promise<boolean> {
  try {
    // Try to play the audio
    await element.play();
    // Immediately pause it
    element.pause();
    element.currentTime = 0;
    return true;
  } catch (error) {
    // Autoplay was prevented
    console.warn('Audio playback test failed:', error);
    return false;
  }
}

/**
 * Validate all required sounds and create fallbacks as needed
 */
export async function validateAudioFiles(): Promise<AudioValidationResult[]> {
  const results: AudioValidationResult[] = [];
  
  for (const [category, soundFiles] of Object.entries(REQUIRED_SOUNDS)) {
    for (const filename of soundFiles) {
      const path = `assets/sounds/${category}/${filename}`;
      try {
        const exists = await checkAudioFileExists(path);
        const element = createAudioElement(category, filename);
        
        results.push({
          category,
          filename,
          exists,
          fallbackCreated: !exists,
          element
        });
      } catch (error) {
        results.push({
          category,
          filename,
          exists: false,
          fallbackCreated: true,
          error: error instanceof Error ? error.message : String(error)
        });
      }
    }
  }
  
  return results;
}

/**
 * Module initializer
 */
export async function initializeAudioSystem(): Promise<{ 
  results: AudioValidationResult[]; 
  playbackAllowed: boolean; 
}> {
  try {
    const results = await validateAudioFiles();
    const playbackAllowed = await testAudioPlayback();
    
    return {
      results,
      playbackAllowed
    };
  } catch (error) {
    console.error('Failed to initialize audio system:', error);
    return {
      results: [],
      playbackAllowed: false
    };
  }
}
